#!/usr/bin/env python3
#
# Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#

import sys
import argparse

# ================================= 비디오 =================================
class VideoCamera(object):
    _instance = None

    def __new__(cls):
      if cls._instance is None:
        cls._instance = super(VideoCamera, cls).__new__(cls)
        cls._instance.video = cv2.VideoCapture(droidCam_url)
        (cls._instance.grabbed, cls._instance.frame) = cls._instance.video.read()
        threading.Thread(target=cls._instance.update, args=()).start()
      return cls._instance

    def __del__(self):
      self.video.release()

    def get_frame(self):
      image = self.frame
      if image is None or image.size == 0:
        return None
      _, jpeg = cv2.imencode('.jpg', image)
      return jpeg.tobytes()

    def update(self):
      while True:
        (self.grabbed, self.frame) = self.video.read()

    def gen(camera):
        while True:
            frame = camera.get_frame()
            if frame is not None:
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n\r\n')



# ================================= 스텝모터 =================================

import Jetson.GPIO as GPIO
from time import sleep

global DIR, STEP

DIR = 10
STEP = 8

GPIO.setmode(GPIO.BCM)
GPIO.setup(DIR, GPIO.OUT)
GPIO.setup(STEP, GPIO.OUT)
GPIO.output(DIR, GPIO.HIGH)

class StepperMotorControl:
    def __init__(self):
        self.motor = 0
        self.centerROI = 0
        self.SetStepDirection(self.motor)

    ## wholeVideoHeight =>
    ## RecognitionFace's center x, y point ##
    # centerPointROI = ((x1+x2)/2, (y1+y2)/2)
    # centerTopPoint = (wholeVideoHeight/2) + 20
    # centerBottomPoint = (wholeVideoHeight/2) - 20
    #

    def SetStepDirection(self, motor):
        self.motor = motor

        if self.centerY <= 349 and 369 <= self.centerY:
            print("============center============")
            return "center"
        # UP
        elif 0 < self.centerY and self.centerY < 349:
            GPIO.output(DIR, GPIO.HIGH)
            self.motor = self.motor + 1
            return "CW"
        # DOWN
        elif 369 < self.centerY and self.centerY < 719:
            GPIO.output(DIR, GPIO.LOW)
            self.motor = self.motor - 1
            return "CCW"
        # HOME
        elif self.motor == 0 or self.motor == 10666:
            return "HOME"

        print("current motor step:", end=" ")
        print(self.motor)



if __name__ == '__main__':
    while True:
        s = step()
        if not s.SetStepDirection(0) == "CW" or not s.SetStepDirection(0) == "CCW":
            continue
        GPIO.output(STEP, GPIO.HIGH)
        sleep(.005)
        GPIO.output(STEP, GPIO.LOW)

        if not input.IsStreaming() or not output.IsStreaming():
            GPIO.cleanup()
            break
